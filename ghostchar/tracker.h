// Copyright (c) 2011 Skew Matrix Software LLC. All rights reserved.

#ifndef __TRACKER_H__
#define __TRACKER_H__ 1


#include <osg/Vec3>
#include <deque>


/** \class HeadTracker HeadTracker.h HeadTracker.h
\brief Simulate 3D Brownian motion using a vector-based algorithym.

Traces a time-series path through 3D space. The last known time and
position are stored in \c _lastTime and \c _lastPos. Call getPosition()
to generate and return a new position at a new time.

getDeltaPosition() implicitly calls getPosition() if the paramter \c t
is not equal to \c _lastTime, then returns \c _deltaPos, the difference
between the last two calls to getPosition().

New position values are generated by summing vectors stored on a stack.
The \c baseDuration constructor parameter controls the time duration of
the stack base value, and thus controls the Brownian motion amplitude.
The \c depth constructor parameter controls the stack depth. Each higher
level as half the lower level's time duration. Thus, increasing the
\c depth increases the frequency with which the motion vector changes.

For use with random character head motion, the \c z value of the motion
vector is halved, resulting is a more stable up/down position.
*/
class HeadTracker
{
public:
    HeadTracker( double baseDuration=4, unsigned int depth=4 );
    ~HeadTracker();

    osg::Vec3 getPosition( const double t );
    osg::Vec3 getDeltaPosition( const double t );

protected:
    static float randNeg1To1();
    osg::Vec3 randPulledVector( const float magnitude ) const;

    double _baseDuration;
    unsigned int _depth;

    typedef std::deque< osg::Vec3 > PosStack;
    PosStack _posStack;

    double _lastTime;
    osg::Vec3 _lastPos;
    osg::Vec3 _deltaPos;
};


// __TRACKER_H__
#endif
